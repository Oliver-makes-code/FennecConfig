# Basic key/value pairings
key1 = "value"
key2 = 15

# Type hints to guide on what values are expected
# These are not checked when parsing, they only serve to guide people reading the config
# As they're not checked, they can contain any text, as long as it's not a :, [, {, or =
key3: string = "value"
key4: number = 15

# Keys can also be quoted, to include more than just A-Z0-9$
"Hello, World!" = 15

# Mutliple keys can also be on the same line, if space separated
# This is not recommended, though, as it impairs readability
key5: string = "owo" key6: string = "uwu"

# Nested key/value objects
someNest { # Note, no equal sign
    key1: string = "owo"
    key2: string = "nya"
    anotherNest {
        key = "hi!"
    }
}
# Key/value objects can also have type hints
someObject: owo {
    
}

# Array of values
someArray [ # Again, no equal sign
    "owo" "uwu"
    [
        "hewwo!"
    ]
]

# Arrays can nest key/value objects
someOtherArray [
    {
        key = "I use nyarch, BTW!"
    }
]

# Typed arrays
someTypedArray: number [
    1 2 3 4 5
]

# Multiline strings are supported
someString: string = """
    awoo nya owo uwu owo uwu uwu nya awoo.
    nya nya nya owo uwu owo owo owo.
"""

# Put a - before a multiline string to trim indents
someOtherString: string = -"""
    owo
    uwu
"""

# Primitive types
strings [
    "owo"
    """
        owo
    """
    -"""
        uwu
    """
]
numbers [
    5915587277 # Int
    6.2831853071 # Float
    0x45 # Hex literal
    1x45 # Sign bit supported
    0o105 # Octal literal
    0b1000101 # Binary literal
]
booleans [
    true # true/false
    False # True/False
    1b # 1b/0b
]
nulls [
    null
    nil
    void
]

# Fennec also supports files that contain a value at root, such as a string or an array
# This helps Fennec go to and from JSON
# An example of such:
# ```fennec
# [
#     1 2 "owo" "nya" 
#     null
#     false 93479834
# ]
# ```
# This can also be applied with a key/value object
# Making JSON's standard of having braces around the root node optional.